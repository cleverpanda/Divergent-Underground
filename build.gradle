buildscript {
  repositories {
    jcenter()
    maven {
      name = 'forge'
      url = 'http://files.minecraftforge.net/maven'
    }
    maven {
      name = 'gradle'
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
  }
}

apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
  mavenLocal()
  mavenCentral()

}

repositories {
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
  maven {
    name 'IE Repo'
    url 'https://maven.blamejared.com/'
  }
  maven {
    name = "tterrag"
    url = "http://maven.tterrag.com"
  }
  maven {
    name = "tterrag2"
    url = "http://maven2.tterrag.com"
  }
  maven { // CoFH
    name 'Covers Maven'
    url 'http://maven.covers1624.net/'
  }
  maven {
    name 'Nut boii'
    url 'http://tehnut.info/maven'
  }
  maven { // CCL, CCC, NEI
    name 'Chickenbones Repo'
    url 'http://chickenbones.net/maven/'
  }
  maven{
    name = "ic2, forestry"
    url = "http://maven.ic2.player.to/"
  }
    maven { // ModMaven, there is a bunch of stuff on there
        name 'ModMaven'
        url 'http://modmaven.k-4u.nl/'
    }
  maven {
    name 'MMD'
    url 'https://maven.mcmoddev.com/'
  }

  maven {
    url = 'https://mod-buildcraft.com/maven'
  }

  maven { // Mantle, TCon, JEI
    name 'DVS1 Maven FS'
    url 'https://dvs1.progwml6.com/files/maven'
  }
  
}

dependencies {
deobfCompile"mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2"
deobfCompile"codechicken:CodeChickenLib:1.12.2-3.2.2.355:universal"

  deobfCompile("cofh:CoFHCore:1.12.2-4.6.2.25:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile("cofh:ThermalFoundation:1.12.2-2.6.2.26:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile("cofh:ThermalExpansion:1.12.2-5.5.3.41:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile("cofh:RedstoneFlux:1.12-2.1.0.7:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile("cofh:CoFHWorld:1.12.2-1.3.0.6:universal") {
    exclude group: 'mezz.jei'
  }
  deobfCompile("com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.12.2-7.0.1.2426:universal")
  
  deobfCompile("net.sengir.forestry:forestry_1.12.2:5.8.1.322")
		
  deobfCompile("net.industrial-craft:industrialcraft-2:2.8.+")
  deobfCompile("blusunrize:ImmersiveEngineering:0.12-89-518:deobf")
  deobfCompile("com.mod-buildcraft:buildcraft-api:7.99.17")
    deobfCompile("mekanism:Mekanism:1.12.2:9.7.2.373") {
        exclude group: 'MCMultiPart'
        exclude group: 'mezz.jei'
    }
  deobfCompile("appeng:appliedenergistics2:rv6-stable-6")
  deobfCompile("vazkii.autoreglib:AutoRegLib:1.3-28.19")
  deobfCompile("vazkii.quark:Quark:r1.5-146.9")
  deobfCompile("thaumcraft:Thaumcraft:1.12.2:6.1.BETA26")
  deobfCompile("baubles:Baubles:1.12:1.5.2")

  deobfCompile("com.mcmoddev:AdditionalLootTables:1.12-2.0.3.39")
  deobfCompile("com.mcmoddev:OreSpawn:1.12-3.2.2.125")
  deobfCompile("com.mcmoddev:MMDLib:1.12-1.0.0-rc2.36")
  deobfCompile("com.mcmoddev:BaseMetals:1.12-2.5.0-rc2.332")
  deobfCompile("team.chisel:Chisel:MC1.12.2-0.2.1.34")
  deobfCompile("team.chisel.ctm:CTM:MC1.12.2-0.3.3.22")

  deobfCompile("slimeknights.mantle:Mantle:1.12-1.3.3.55") {
    exclude group: 'mezz.jei'
  }

  deobfCompile("slimeknights:TConstruct:1.12.2-2.12.0.152") {
    exclude group: 'mezz.jei'
  }
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    mappings = "stable_39"
	
	replace '@FINGERPRINT@', project.findProperty('signSHA1')
	
	if (project.hasProperty('mc_username')) {
    clientRunArgs += ['--username', "${project.mc_username}"]
    if (project.hasProperty('mc_password')) {
      clientRunArgs += ['--password=', "${project.mc_password}"]
    }
  }
  if (project.hasProperty('mc_uuid')) {
    clientRunArgs += ['--uuid', "${project.mc_uuid}"]
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

javadoc {
  failOnError = false
}

def mod_file = getModFile()
def short_version = getVersion('VERSION', mod_file)
version = mc_version + '-' + short_version
def display_version = short_version

if (System.getenv().BUILD_NUMBER) {
  version += '.' + System.getenv().BUILD_NUMBER
  display_version = '.' + System.getenv().BUILD_NUMBER
}

sourceCompatibility = targetCompatibility = '1.8'

eclipse.project {
  buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  natures 'org.eclipse.buildship.core.gradleprojectnature'
}

import groovy.json.JsonSlurper

processResources {
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }

  rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
  manifest {
    if (project.hasProperty('coreplugin')) {
      attributes 'FMLCorePluginContainsFMLMod': 'true'
      attributes 'FMLCorePlugin': project.coreplugin
    }
  }
}

task deobfJar(type: Jar) {
  classifier = 'deobf'
  from sourceSets.main.output
}

task signJar(type: SignJar, dependsOn: reobfJar) {
  // Skips if the keyStore property is missing.
  onlyIf {
    project.hasProperty('keyStore')
  }

  // findProperty allows us to reference the property without it existing. 
  // Using project.propName would cause the script to fail validation if 
  // the property did not exist. 
  keyStore = project.findProperty('keyStore')
  alias = project.findProperty('keyStoreAlias')
  storePass = project.findProperty('keyStorePass')
  keyPass = project.findProperty('keyStoreKeyPass')
  inputFile = jar.archivePath
  outputFile = jar.archivePath
}

build.dependsOn signJar


processResources {
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version

  from (sourceSets.main.resources.srcDirs) {
    include 'mcmod.info'
    expand 'version': short_version, 'mcversion': project.minecraft.version
  }

  from (sourceSets.main.resources.srcDirs) {
    exclude 'mcmod.info'
  }
}

String getModFile() {
  String path = ''
  FileTree tree = fileTree(dir: 'src/main/java')
  tree.include '**/*.java'
  tree.visit { element ->
    if (element.file.isFile()) {
      element.file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith('@Mod(')) {
          path = "src/main/java/$element.relativePath"
        }
      }
    }
  }
  return path
}

String getVersion(String type, String mod_file) {
  String major = '0'
  String revision = '0'
  String patch = '0'
  File file = file(mod_file)
  def prefix = ~/^(?:public|protected|private) static final String $type = ".*$/
  file.eachLine { String s ->
    s = s.trim()
    if (s ==~ prefix || prefix.matcher(s).matches()) {
      String[] bits = s.split("=")
      String interesting = bits[1].trim()
      interesting = interesting.substring(1, interesting.length() - 2)
      String[] pts = interesting.trim().split("\\.")

      major = pts[0] ?: '0'
      revision = pts[1] ?: '0'
      patch = pts[2] ?: '0'
    }
  }
  return "$major.$revision.$patch"
}